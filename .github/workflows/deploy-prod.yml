name: Deploy to Production Environment

on:
  pull_request:
    branches: ['main']
    types:
      - closed

jobs:
  deploy:
    name: Deploy to production environment
    if: (startsWith(github.event.pull_request.head.ref, 'release/') || startsWith(github.event.pull_request.head.ref, 'hotfix-release/')) && github.event.pull_request.merged == true
    uses: ./.github/workflows/deploy.yml
    with:
      environment: 'production'
      bugsnag_release_stage: 'production'
      s3_dir_path: 'v3'
      s3_dir_path_legacy: 'v1.1'
      action_type: ''
    secrets:
      AWS_ACCOUNT_ID: ${{ secrets.AWS_PROD_ACCOUNT_ID }}
      AWS_S3_BUCKET_NAME: ${{ secrets.AWS_PROD_S3_BUCKET_NAME }}
      AWS_S3_SYNC_ROLE: ${{ secrets.AWS_PROD_S3_SYNC_ROLE }}
      AWS_CF_DISTRIBUTION_ID: ${{ secrets.AWS_PROD_CF_DISTRIBUTION_ID }}
      BUGSNAG_API_KEY: ${{ secrets.RS_PROD_BUGSNAG_API_KEY }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_RELEASE_CHANNEL_ID: ${{ secrets.SLACK_RELEASE_CHANNEL_ID }}

  deploy-sanity-suite:
    name: Deploy Sanity Suite
    needs: deploy
    uses: ./.github/workflows/deploy-sanity-suite.yml
    with:
      environment: 'production'
    secrets:
      AWS_PROD_ACCOUNT_ID: ${{ secrets.AWS_PROD_ACCOUNT_ID }}
      AWS_PROD_S3_BUCKET_NAME: ${{ secrets.AWS_PROD_S3_BUCKET_NAME }}
      AWS_PROD_S3_SYNC_ROLE: ${{ secrets.AWS_PROD_S3_SYNC_ROLE }}
      AWS_PROD_CF_DISTRIBUTION_ID: ${{ secrets.AWS_PROD_CF_DISTRIBUTION_ID }}
      SANITY_SUITE_PROD_WRITE_KEY: ${{ secrets.SANITY_SUITE_PROD_WRITE_KEY }}
      SANITY_SUITE_PROD_DATAPLANE_URL: ${{ secrets.SANITY_SUITE_PROD_DATAPLANE_URL }}
      SANITY_SUITE_PROD_CONFIG_SERVER_HOST: ${{ secrets.SANITY_SUITE_PROD_CONFIG_SERVER_HOST }}
      RS_PROD_BUGSNAG_API_KEY: ${{ secrets.RS_PROD_BUGSNAG_API_KEY }}
      SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
      SLACK_RELEASE_CHANNEL_ID: ${{ secrets.SLACK_RELEASE_CHANNEL_ID_NON_PROD }}

  extract-version:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout source branch
        uses: actions/checkout@v4

      - name: Determine the SDK version
        id: determine_version
        run: |
          # Default new_version to empty
          new_version=""

          # Check if it's a tag
          if [[ "${{ github.ref }}" == refs/tags/v* ]]; then
            new_version="${{ github.ref }}" 
            new_version="${new_version#refs/tags/v}"  # Strip refs/tags/v

          # Check if it's a release branch
          elif [[ "${{ github.head_ref }}" == release/* ]]; then
            new_version="${{ github.head_ref }}" 
            new_version="${new_version#release/}"  # Strip release/

          # Check if it's a hotfix release branch
          elif [[ "${{ github.head_ref }}" == hotfix-release/* ]]; then
            new_version="${{ github.head_ref }}" 
            new_version="${new_version#hotfix-release/}"  # Strip hotfix-release/
          fi

          # Set the version as an output variable
          echo "SDK_VERSION=$new_version"

  trigger-bs-sanity-suite:
    uses: ./.github/workflows/browserstack-sanity.yml
    with:
      environment: production
      sdkVersion: $SDK_VERSION
