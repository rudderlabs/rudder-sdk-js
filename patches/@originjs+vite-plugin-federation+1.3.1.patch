diff --git a/node_modules/@originjs/vite-plugin-federation/dist/index.js b/node_modules/@originjs/vite-plugin-federation/dist/index.js
index f54ce2e..e01eb38 100644
--- a/node_modules/@originjs/vite-plugin-federation/dist/index.js
+++ b/node_modules/@originjs/vite-plugin-federation/dist/index.js
@@ -880,12 +880,11 @@ function prodExposePlugin(options) {
     EXPOSES_MAP.set(item[0], exposeFilepath);
     EXPOSES_KEY_MAP.set(
       item[0],
-      `__federation_expose_${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
+      `remote-${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
     );
     moduleMap += `
 "${item[0]}":()=>{
-      ${DYNAMIC_LOADING_CSS}('${DYNAMIC_LOADING_CSS_PREFIX}${exposeFilepath}')
-      return __federation_import('\${__federation_expose_${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
+      return __federation_import('\${remote-${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
   }
   return {
     name: "originjs:expose-production",
@@ -894,23 +893,6 @@ function prodExposePlugin(options) {
       const exportSet = new Set(['Module', '__esModule', 'default', '_export_sfc']);
       let moduleMap = {${moduleMap}}
     const seen = {}
-    export const ${DYNAMIC_LOADING_CSS} = (cssFilePaths) => {
-      const metaUrl = import.meta.url
-      if (typeof metaUrl == 'undefined') {
-        console.warn('The remote style takes effect only when the build.target option in the vite.config.ts file is higher than that of "es2020".')
-        return
-      }
-      const curUrl = metaUrl.substring(0, metaUrl.lastIndexOf('${options.filename}'))
-
-      cssFilePaths.forEach(cssFilePath => {
-        const href = curUrl + cssFilePath
-        if (href in seen) return
-        seen[href] = true
-        const element = document.head.appendChild(document.createElement('link'))
-        element.href = href
-        element.rel = 'stylesheet'
-      })
-    };
     async function __federation_import(name) {
         return import(name);
     };
@@ -1021,7 +1003,7 @@ function prodExposePlugin(options) {
             );
             const slashPath = fileRelativePath.replace(/\\/g, "/");
             remoteEntryChunk.code = remoteEntryChunk.code.replace(
-              `\${__federation_expose_${expose[0]}}`,
+              `\${remote-${expose[0]}}`,
               `./${slashPath}`
             );
           }
diff --git a/node_modules/@originjs/vite-plugin-federation/dist/index.mjs b/node_modules/@originjs/vite-plugin-federation/dist/index.mjs
index b97a7ae..57c22a6 100644
--- a/node_modules/@originjs/vite-plugin-federation/dist/index.mjs
+++ b/node_modules/@originjs/vite-plugin-federation/dist/index.mjs
@@ -863,12 +863,11 @@ function prodExposePlugin(options) {
     EXPOSES_MAP.set(item[0], exposeFilepath);
     EXPOSES_KEY_MAP.set(
       item[0],
-      `__federation_expose_${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
+      `remote-${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
     );
     moduleMap += `
 "${item[0]}":()=>{
-      ${DYNAMIC_LOADING_CSS}('${DYNAMIC_LOADING_CSS_PREFIX}${exposeFilepath}')
-      return __federation_import('\${__federation_expose_${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
+      return __federation_import('\${remote-${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
   }
   return {
     name: "originjs:expose-production",
@@ -877,23 +876,6 @@ function prodExposePlugin(options) {
       const exportSet = new Set(['Module', '__esModule', 'default', '_export_sfc']);
       let moduleMap = {${moduleMap}}
     const seen = {}
-    export const ${DYNAMIC_LOADING_CSS} = (cssFilePaths) => {
-      const metaUrl = import.meta.url
-      if (typeof metaUrl == 'undefined') {
-        console.warn('The remote style takes effect only when the build.target option in the vite.config.ts file is higher than that of "es2020".')
-        return
-      }
-      const curUrl = metaUrl.substring(0, metaUrl.lastIndexOf('${options.filename}'))
-
-      cssFilePaths.forEach(cssFilePath => {
-        const href = curUrl + cssFilePath
-        if (href in seen) return
-        seen[href] = true
-        const element = document.head.appendChild(document.createElement('link'))
-        element.href = href
-        element.rel = 'stylesheet'
-      })
-    };
     async function __federation_import(name) {
         return import(name);
     };
@@ -1004,7 +986,7 @@ function prodExposePlugin(options) {
             );
             const slashPath = fileRelativePath.replace(/\\/g, "/");
             remoteEntryChunk.code = remoteEntryChunk.code.replace(
-              `\${__federation_expose_${expose[0]}}`,
+              `\${remote-${expose[0]}}`,
               `./${slashPath}`
             );
           }
