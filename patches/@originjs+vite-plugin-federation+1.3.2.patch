diff --git a/node_modules/@originjs/vite-plugin-federation/dist/index.js b/node_modules/@originjs/vite-plugin-federation/dist/index.js
index f0d9618..bc12cba 100644
--- a/node_modules/@originjs/vite-plugin-federation/dist/index.js
+++ b/node_modules/@originjs/vite-plugin-federation/dist/index.js
@@ -378,7 +378,7 @@ function prodRemotePlugin(options) {
                             return new Promise((resolve, reject) => {
                                 const getUrl = typeof remote.url === 'function' ? remote.url : () => Promise.resolve(remote.url);
                                 getUrl().then(url => {
-                                    import(/* @vite-ignore */ url).then(lib => {
+                                    import(/* webpackIgnore: true */ /* @vite-ignore */ url).then(lib => {
                                         if (!remote.inited) {
                                             const shareScope = wrapShareModule(remote.from)
                                             lib.init(shareScope);
@@ -873,12 +873,11 @@ function prodExposePlugin(options) {
     EXPOSES_MAP.set(item[0], exposeFilepath);
     EXPOSES_KEY_MAP.set(
       item[0],
-      `__federation_expose_${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
+      `remote-${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
     );
     moduleMap += `
 "${item[0]}":()=>{
-      ${DYNAMIC_LOADING_CSS}('${DYNAMIC_LOADING_CSS_PREFIX}${exposeFilepath}')
-      return __federation_import('\${__federation_expose_${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
+      return __federation_import('\${remote-${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
   }
   return {
     name: "originjs:expose-production",
@@ -887,23 +886,6 @@ function prodExposePlugin(options) {
       const exportSet = new Set(['Module', '__esModule', 'default', '_export_sfc']);
       let moduleMap = {${moduleMap}}
     const seen = {}
-    export const ${DYNAMIC_LOADING_CSS} = (cssFilePaths) => {
-      const metaUrl = import.meta.url
-      if (typeof metaUrl == 'undefined') {
-        console.warn('The remote style takes effect only when the build.target option in the vite.config.ts file is higher than that of "es2020".')
-        return
-      }
-      const curUrl = metaUrl.substring(0, metaUrl.lastIndexOf('${options.filename}'))
-
-      cssFilePaths.forEach(cssFilePath => {
-        const href = curUrl + cssFilePath
-        if (href in seen) return
-        seen[href] = true
-        const element = document.head.appendChild(document.createElement('link'))
-        element.href = href
-        element.rel = 'stylesheet'
-      })
-    };
     async function __federation_import(name) {
         return import(name);
     };
@@ -1014,7 +996,7 @@ function prodExposePlugin(options) {
             );
             const slashPath = fileRelativePath.replace(/\\/g, "/");
             remoteEntryChunk.code = remoteEntryChunk.code.replace(
-              `\${__federation_expose_${expose[0]}}`,
+              `\${remote-${expose[0]}}`,
               `./${slashPath}`
             );
           }
@@ -1086,7 +1068,7 @@ const loadJS = async (url, fn) => {
   document.getElementsByTagName('head')[0].appendChild(script);
 }
 function get(name, ${REMOTE_FROM_PARAMETER}){
-  return import(/* @vite-ignore */ name).then(module => ()=> {
+  return import(/* webpackIgnore: true */ /* @vite-ignore */ name).then(module => ()=> {
     if (${REMOTE_FROM_PARAMETER} === 'webpack') {
       return Object.prototype.toString.call(module).indexOf('Module') > -1 && module.default ? module.default : module
     }
@@ -1120,7 +1102,7 @@ async function __federation_method_ensure(remoteId) {
       return new Promise((resolve, reject) => {
         const getUrl = typeof remote.url === 'function' ? remote.url : () => Promise.resolve(remote.url);
         getUrl().then(url => {
-          import(/* @vite-ignore */ url).then(lib => {
+          import(/* webpackIgnore: true */ /* @vite-ignore */ url).then(lib => {
             if (!remote.inited) {
               const shareScope = wrapShareScope(remote.from)
               lib.init(shareScope);
diff --git a/node_modules/@originjs/vite-plugin-federation/dist/index.mjs b/node_modules/@originjs/vite-plugin-federation/dist/index.mjs
index b040304..132fa3b 100644
--- a/node_modules/@originjs/vite-plugin-federation/dist/index.mjs
+++ b/node_modules/@originjs/vite-plugin-federation/dist/index.mjs
@@ -361,7 +361,7 @@ function prodRemotePlugin(options) {
                             return new Promise((resolve, reject) => {
                                 const getUrl = typeof remote.url === 'function' ? remote.url : () => Promise.resolve(remote.url);
                                 getUrl().then(url => {
-                                    import(/* @vite-ignore */ url).then(lib => {
+                                    import(/* webpackIgnore: true */ /* @vite-ignore */ url).then(lib => {
                                         if (!remote.inited) {
                                             const shareScope = wrapShareModule(remote.from)
                                             lib.init(shareScope);
@@ -856,12 +856,11 @@ function prodExposePlugin(options) {
     EXPOSES_MAP.set(item[0], exposeFilepath);
     EXPOSES_KEY_MAP.set(
       item[0],
-      `__federation_expose_${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
+      `remote-${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
     );
     moduleMap += `
 "${item[0]}":()=>{
-      ${DYNAMIC_LOADING_CSS}('${DYNAMIC_LOADING_CSS_PREFIX}${exposeFilepath}')
-      return __federation_import('\${__federation_expose_${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
+      return __federation_import('\${remote-${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
   }
   return {
     name: "originjs:expose-production",
@@ -870,23 +869,6 @@ function prodExposePlugin(options) {
       const exportSet = new Set(['Module', '__esModule', 'default', '_export_sfc']);
       let moduleMap = {${moduleMap}}
     const seen = {}
-    export const ${DYNAMIC_LOADING_CSS} = (cssFilePaths) => {
-      const metaUrl = import.meta.url
-      if (typeof metaUrl == 'undefined') {
-        console.warn('The remote style takes effect only when the build.target option in the vite.config.ts file is higher than that of "es2020".')
-        return
-      }
-      const curUrl = metaUrl.substring(0, metaUrl.lastIndexOf('${options.filename}'))
-
-      cssFilePaths.forEach(cssFilePath => {
-        const href = curUrl + cssFilePath
-        if (href in seen) return
-        seen[href] = true
-        const element = document.head.appendChild(document.createElement('link'))
-        element.href = href
-        element.rel = 'stylesheet'
-      })
-    };
     async function __federation_import(name) {
         return import(name);
     };
@@ -997,7 +979,7 @@ function prodExposePlugin(options) {
             );
             const slashPath = fileRelativePath.replace(/\\/g, "/");
             remoteEntryChunk.code = remoteEntryChunk.code.replace(
-              `\${__federation_expose_${expose[0]}}`,
+              `\${remote-${expose[0]}}`,
               `./${slashPath}`
             );
           }
@@ -1069,7 +1051,7 @@ const loadJS = async (url, fn) => {
   document.getElementsByTagName('head')[0].appendChild(script);
 }
 function get(name, ${REMOTE_FROM_PARAMETER}){
-  return import(/* @vite-ignore */ name).then(module => ()=> {
+  return import(/* webpackIgnore: true */ /* @vite-ignore */ name).then(module => ()=> {
     if (${REMOTE_FROM_PARAMETER} === 'webpack') {
       return Object.prototype.toString.call(module).indexOf('Module') > -1 && module.default ? module.default : module
     }
@@ -1103,7 +1085,7 @@ async function __federation_method_ensure(remoteId) {
       return new Promise((resolve, reject) => {
         const getUrl = typeof remote.url === 'function' ? remote.url : () => Promise.resolve(remote.url);
         getUrl().then(url => {
-          import(/* @vite-ignore */ url).then(lib => {
+          import(/* webpackIgnore: true */ /* @vite-ignore */ url).then(lib => {
             if (!remote.inited) {
               const shareScope = wrapShareScope(remote.from)
               lib.init(shareScope);
