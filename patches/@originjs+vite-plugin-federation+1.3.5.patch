diff --git a/node_modules/@originjs/vite-plugin-federation/dist/index.js b/node_modules/@originjs/vite-plugin-federation/dist/index.js
index f84c98f..a47fa20 100644
--- a/node_modules/@originjs/vite-plugin-federation/dist/index.js
+++ b/node_modules/@originjs/vite-plugin-federation/dist/index.js
@@ -391,7 +391,7 @@ function prodRemotePlugin(options) {
                             return new Promise((resolve, reject) => {
                                 const getUrl = typeof remote.url === 'function' ? remote.url : () => Promise.resolve(remote.url);
                                 getUrl().then(url => {
-                                    import(/* @vite-ignore */ url).then(lib => {
+                                    import(/* webpackIgnore: true */ /* @vite-ignore */ url).then(lib => {
                                         if (!remote.inited) {
                                             const shareScope = wrapShareModule(remote.from);
                                             lib.init(shareScope);
@@ -886,12 +886,11 @@ function prodExposePlugin(options) {
     EXPOSES_MAP.set(item[0], exposeFilepath);
     EXPOSES_KEY_MAP.set(
       item[0],
-      `__federation_expose_${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
+      `remote-${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
     );
     moduleMap += `
 "${item[0]}":()=>{
-      ${DYNAMIC_LOADING_CSS}('${DYNAMIC_LOADING_CSS_PREFIX}${exposeFilepath}', ${item[1].dontAppendStylesToHead}, '${item[0]}')
-      return __federation_import('\${__federation_expose_${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
+      return __federation_import('\${remote-${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
   }
   return {
     name: "originjs:expose-production",
@@ -900,29 +899,6 @@ function prodExposePlugin(options) {
       const exportSet = new Set(['Module', '__esModule', 'default', '_export_sfc']);
       let moduleMap = {${moduleMap}}
     const seen = {}
-    export const ${DYNAMIC_LOADING_CSS} = (cssFilePaths, dontAppendStylesToHead, exposeItemName) => {
-      const metaUrl = import.meta.url
-      if (typeof metaUrl == 'undefined') {
-        console.warn('The remote style takes effect only when the build.target option in the vite.config.ts file is higher than that of "es2020".')
-        return
-      }
-      const curUrl = metaUrl.substring(0, metaUrl.lastIndexOf('${options.filename}'))
-
-      cssFilePaths.forEach(cssFilePath => {
-        const href = curUrl + cssFilePath
-        if (href in seen) return
-        seen[href] = true
-        if (dontAppendStylesToHead) {
-          const key = 'css__${options.name}__' + exposeItemName;
-          if (window[key] == null) window[key] = []
-          window[key].push(href);
-        } else {
-          const element = document.head.appendChild(document.createElement('link'))
-          element.href = href
-          element.rel = 'stylesheet'
-        }
-      })
-    };
     async function __federation_import(name) {
         return import(name);
     };
@@ -1034,7 +1010,7 @@ function prodExposePlugin(options) {
             );
             const slashPath = fileRelativePath.replace(/\\/g, "/");
             remoteEntryChunk.code = remoteEntryChunk.code.replace(
-              `\${__federation_expose_${expose[0]}}`,
+              `\${remote-${expose[0]}}`,
               `./${slashPath}`
             );
           }
@@ -1106,7 +1082,7 @@ const loadJS = async (url, fn) => {
   document.getElementsByTagName('head')[0].appendChild(script);
 }
 function get(name, ${REMOTE_FROM_PARAMETER}){
-  return import(/* @vite-ignore */ name).then(module => ()=> {
+  return import(/* webpackIgnore: true */ /* @vite-ignore */ name).then(module => ()=> {
     if (${REMOTE_FROM_PARAMETER} === 'webpack') {
       return Object.prototype.toString.call(module).indexOf('Module') > -1 && module.default ? module.default : module
     }
@@ -1140,7 +1116,7 @@ async function __federation_method_ensure(remoteId) {
       return new Promise((resolve, reject) => {
         const getUrl = typeof remote.url === 'function' ? remote.url : () => Promise.resolve(remote.url);
         getUrl().then(url => {
-          import(/* @vite-ignore */ url).then(lib => {
+          import(/* webpackIgnore: true */ /* @vite-ignore */ url).then(lib => {
             if (!remote.inited) {
               const shareScope = wrapShareScope(remote.from)
               lib.init(shareScope);
diff --git a/node_modules/@originjs/vite-plugin-federation/dist/index.mjs b/node_modules/@originjs/vite-plugin-federation/dist/index.mjs
index 80d1f21..b9ecbbd 100644
--- a/node_modules/@originjs/vite-plugin-federation/dist/index.mjs
+++ b/node_modules/@originjs/vite-plugin-federation/dist/index.mjs
@@ -374,7 +374,7 @@ function prodRemotePlugin(options) {
                             return new Promise((resolve, reject) => {
                                 const getUrl = typeof remote.url === 'function' ? remote.url : () => Promise.resolve(remote.url);
                                 getUrl().then(url => {
-                                    import(/* @vite-ignore */ url).then(lib => {
+                                    import(/* webpackIgnore: true */ /* @vite-ignore */ url).then(lib => {
                                         if (!remote.inited) {
                                             const shareScope = wrapShareModule(remote.from);
                                             lib.init(shareScope);
@@ -869,12 +869,11 @@ function prodExposePlugin(options) {
     EXPOSES_MAP.set(item[0], exposeFilepath);
     EXPOSES_KEY_MAP.set(
       item[0],
-      `__federation_expose_${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
+      `remote-${removeNonRegLetter(item[0], NAME_CHAR_REG)}`
     );
     moduleMap += `
 "${item[0]}":()=>{
-      ${DYNAMIC_LOADING_CSS}('${DYNAMIC_LOADING_CSS_PREFIX}${exposeFilepath}', ${item[1].dontAppendStylesToHead}, '${item[0]}')
-      return __federation_import('\${__federation_expose_${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
+      return __federation_import('\${remote-${item[0]}}').then(module =>Object.keys(module).every(item => exportSet.has(item)) ? () => module.default : () => module)},`;
   }
   return {
     name: "originjs:expose-production",
@@ -883,29 +882,6 @@ function prodExposePlugin(options) {
       const exportSet = new Set(['Module', '__esModule', 'default', '_export_sfc']);
       let moduleMap = {${moduleMap}}
     const seen = {}
-    export const ${DYNAMIC_LOADING_CSS} = (cssFilePaths, dontAppendStylesToHead, exposeItemName) => {
-      const metaUrl = import.meta.url
-      if (typeof metaUrl == 'undefined') {
-        console.warn('The remote style takes effect only when the build.target option in the vite.config.ts file is higher than that of "es2020".')
-        return
-      }
-      const curUrl = metaUrl.substring(0, metaUrl.lastIndexOf('${options.filename}'))
-
-      cssFilePaths.forEach(cssFilePath => {
-        const href = curUrl + cssFilePath
-        if (href in seen) return
-        seen[href] = true
-        if (dontAppendStylesToHead) {
-          const key = 'css__${options.name}__' + exposeItemName;
-          if (window[key] == null) window[key] = []
-          window[key].push(href);
-        } else {
-          const element = document.head.appendChild(document.createElement('link'))
-          element.href = href
-          element.rel = 'stylesheet'
-        }
-      })
-    };
     async function __federation_import(name) {
         return import(name);
     };
@@ -1017,7 +993,7 @@ function prodExposePlugin(options) {
             );
             const slashPath = fileRelativePath.replace(/\\/g, "/");
             remoteEntryChunk.code = remoteEntryChunk.code.replace(
-              `\${__federation_expose_${expose[0]}}`,
+              `\${remote-${expose[0]}}`,
               `./${slashPath}`
             );
           }
@@ -1089,7 +1065,7 @@ const loadJS = async (url, fn) => {
   document.getElementsByTagName('head')[0].appendChild(script);
 }
 function get(name, ${REMOTE_FROM_PARAMETER}){
-  return import(/* @vite-ignore */ name).then(module => ()=> {
+  return import(/* webpackIgnore: true */ /* @vite-ignore */ name).then(module => ()=> {
     if (${REMOTE_FROM_PARAMETER} === 'webpack') {
       return Object.prototype.toString.call(module).indexOf('Module') > -1 && module.default ? module.default : module
     }
@@ -1123,7 +1099,7 @@ async function __federation_method_ensure(remoteId) {
       return new Promise((resolve, reject) => {
         const getUrl = typeof remote.url === 'function' ? remote.url : () => Promise.resolve(remote.url);
         getUrl().then(url => {
-          import(/* @vite-ignore */ url).then(lib => {
+          import(/* webpackIgnore: true */ /* @vite-ignore */ url).then(lib => {
             if (!remote.inited) {
               const shareScope = wrapShareScope(remote.from)
               lib.init(shareScope);
